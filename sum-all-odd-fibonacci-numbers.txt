function sumFibs(num) {
  let fib = 1;
  let sumArr = [] ; 
  sumArr[0] = fib;
  let antFib=[]; antFib[0] = fib;
  let sum = 0;
  for(let j=1;fib<=num;j++){
    antFib[j] = fib;
    if( j > 1 ){
      fib = fib + antFib[j-1];
      if((fib%2 != 0)&&(fib<=num)){
        sumArr.push(fib);
        sum = sumArr.reduce((a,b) => a + b, 0);
      }
    } else {
      sumArr.push(fib);
    }
  }

  return sum;
}
sumFibs(75024);
// Intermediate Algorithm Scripting: Sum All Odd Fibonacci Numbers
// Given a positive integer num, return the sum of all odd Fibonacci numbers that are less than or equal to num.

// The first two numbers in the Fibonacci sequence are 1 and 1. Every additional number in the sequence is the sum of the two previous numbers. The first six numbers of the Fibonacci sequence are 1, 1, 2, 3, 5 and 8.

// For example, sumFibs(10) should return 10 because all odd Fibonacci numbers less than or equal to 10 are 1, 1, 3, and 5.
// sumFibs(1) should return a number.
// sumFibs(1000) should return 1785.
// sumFibs(4000000) should return 4613732.
// sumFibs(4) should return 5.
// sumFibs(75024) should return 60696.
// sumFibs(75025) should return 135721.